/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VoteManagerInterface extends ethers.utils.Interface {
  functions: {
    "createProposal(string)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;

  events: {
    "ProposalCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
}

export class VoteManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VoteManagerInterface;

  functions: {
    createProposal(
      metadata: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createProposal(string)"(
      metadata: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getProposal(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  createProposal(
    metadata: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createProposal(string)"(
    metadata: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getProposal(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getProposal(uint256)"(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    createProposal(
      metadata: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    "createProposal(string)"(
      metadata: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: string;
    }>;

    getProposal(id: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getProposal(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ProposalCreated(id: null): EventFilter;
  };

  estimateGas: {
    createProposal(metadata: string, overrides?: Overrides): Promise<BigNumber>;

    "createProposal(string)"(
      metadata: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProposal(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProposal(
      metadata: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createProposal(string)"(
      metadata: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProposal(uint256)"(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
