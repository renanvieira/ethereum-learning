/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace VoteManager {
  export type ProposalDataStruct = {
    creator: string;
    contractAddress: string;
    index: BigNumberish;
    id: BigNumberish;
    exists: boolean;
  };

  export type ProposalDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    creator: string;
    contractAddress: string;
    index: BigNumber;
    id: BigNumber;
    exists: boolean;
  };
}

export interface VoteManagerInterface extends utils.Interface {
  contractName: "VoteManager";
  functions: {
    "createProposal(string)": FunctionFragment;
    "getNumberOfProposals()": FunctionFragment;
    "getProposal(address)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfProposals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getProposal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;

  events: {
    "ProposalCreated(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
}

export type ProposalCreatedEvent = TypedEvent<
  [string, BigNumber, string],
  { owner: string; proposalId: BigNumber; proposalAddress: string }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export interface VoteManager extends BaseContract {
  contractName: "VoteManager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoteManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createProposal(
      metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNumberOfProposals(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposal(
      id: string,
      overrides?: CallOverrides
    ): Promise<[VoteManager.ProposalDataStructOutput]>;

    proposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  createProposal(
    metadata: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNumberOfProposals(overrides?: CallOverrides): Promise<BigNumber>;

  getProposal(
    id: string,
    overrides?: CallOverrides
  ): Promise<VoteManager.ProposalDataStructOutput>;

  proposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    createProposal(
      metadata: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    getNumberOfProposals(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(
      id: string,
      overrides?: CallOverrides
    ): Promise<VoteManager.ProposalDataStructOutput>;

    proposals(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ProposalCreated(address,uint256,address)"(
      owner?: string | null,
      proposalId?: BigNumberish | null,
      proposalAddress?: string | null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      owner?: string | null,
      proposalId?: BigNumberish | null,
      proposalAddress?: string | null
    ): ProposalCreatedEventFilter;
  };

  estimateGas: {
    createProposal(
      metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNumberOfProposals(overrides?: CallOverrides): Promise<BigNumber>;

    getProposal(id: string, overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createProposal(
      metadata: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNumberOfProposals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposal(
      id: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
