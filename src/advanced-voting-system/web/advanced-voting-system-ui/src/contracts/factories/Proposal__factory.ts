/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Proposal, ProposalInterface } from "../Proposal";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "metadataURL",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "voter",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "proposal",
        type: "address",
      },
    ],
    name: "Voted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "_noVotes",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "_yesVotes",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getVotes",
    outputs: [
      {
        internalType: "uint256",
        name: "yesVotes",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "noVotes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "id",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "metadata",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proposalDeadline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Proposal.Vote",
        name: "userVote",
        type: "uint8",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260405162000af538038062000af5833981016040819052620000269162000259565b8242106200007b5760405162461bcd60e51b815260206004820152601a60248201527f496e76616c696420646561646c696e652074696d657374616d7000000000000060448201526064015b60405180910390fd5b6001600160a01b038116620000d35760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642063726561746f722061646472657373000000000000000000604482015260640162000072565b60003411620001135760405162461bcd60e51b815260206004820152600b60248201526a09ad2e6e6d2dcce408aa8960ab1b604482015260640162000072565b600582905583516200012d90600390602087019062000180565b5060048390556200013f818462000149565b505050506200039b565b600034116200015757600080fd5b34600255600155600080546001600160a01b0319166001600160a01b0392909216919091179055565b8280546200018e906200035e565b90600052602060002090601f016020900481019282620001b25760008555620001fd565b82601f10620001cd57805160ff1916838001178555620001fd565b82800160010185558215620001fd579182015b82811115620001fd578251825591602001919060010190620001e0565b506200020b9291506200020f565b5090565b5b808211156200020b576000815560010162000210565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200025457600080fd5b919050565b600080600080608085870312156200027057600080fd5b84516001600160401b03808211156200028857600080fd5b818701915087601f8301126200029d57600080fd5b815181811115620002b257620002b262000226565b604051601f8201601f19908116603f01168101908382118183101715620002dd57620002dd62000226565b81604052828152602093508a84848701011115620002fa57600080fd5b600091505b828210156200031e5784820184015181830185015290830190620002ff565b82821115620003305760008484830101525b80985050505080870151945050506040850151915062000353606086016200023c565b905092959194509250565b600181811c908216806200037357607f821691505b602082108114156200039557634e487b7160e01b600052602260045260246000fd5b50919050565b61074a80620003ab6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80633ccfd60b1161005b5780633ccfd60b1461010d5780637ce1f84414610117578063af640d0f1461012e578063b3f98adc1461013757600080fd5b80630dc960151461008d5780630e1333dc146100ad578063167a86f2146100e5578063392f37e9146100f8575b600080fd5b600854600754604080519283526020830191909152015b60405180910390f35b6100c06100bb36600461062d565b61014a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100a4565b6100c06100f336600461062d565b610181565b610100610191565b6040516100a49190610646565b61011561021f565b005b61012060045481565b6040519081526020016100a4565b61012060055481565b61011561014536600461069b565b610475565b6008818154811061015a57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6007818154811061015a57600080fd5b6003805461019e906106c3565b80601f01602080910402602001604051908101604052809291908181526020018280546101ca906106c3565b80156102175780601f106101ec57610100808354040283529160200191610217565b820191906000526020600020905b8154815290600101906020018083116101fa57829003601f168201915b505050505081565b60015442101561029c5760405162461bcd60e51b815260206004820152602960248201527f54696d654c6f636b3a204c6f636b2065787069726174696f6e206e6f7420796560448201527f742072656163686564000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff1633146103295760405162461bcd60e51b815260206004820152603460248201527f54696d654c6f636b3a2073656e6465722061646472657373206973206e6f742060448201527f7468652070726f706f73616c2063726561746f720000000000000000000000006064820152608401610293565b60025461039e5760405162461bcd60e51b815260206004820152602560248201527f54696d654c6f636b3a205468657265206973206e6f2045544820746f2077697460448201527f68647261770000000000000000000000000000000000000000000000000000006064820152608401610293565b604080516060810182526000805473ffffffffffffffffffffffffffffffffffffffff168252600154602083015260028054838501819052908290559251919290913391908381818185875af1925050503d806000811461041b576040519150601f19603f3d011682016040523d82523d6000602084013e610420565b606091505b50509050806104715760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e642045746865720000000000000000000000006044820152606401610293565b5050565b3360009081526006602052604090205460ff16156104d55760405162461bcd60e51b815260206004820152601a60248201527f54686973206164647265737320616c726561647920766f7465640000000000006044820152606401610293565b6004544211156105275760405162461bcd60e51b815260206004820152601060248201527f50726f706f73616c2065787069726564000000000000000000000000000000006044820152606401610293565b336000908152600660205260408120805460ff19166001179055816001811115610553576105536106fe565b14156105ad57600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff1916331790556105fd565b600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68801805473ffffffffffffffffffffffffffffffffffffffff1916331790555b604051309033907fce0c7a2a940807f7dc2ce7a615c2532e915e6c0ac9a08bc4ed9d515a710a53e290600090a350565b60006020828403121561063f57600080fd5b5035919050565b600060208083528351808285015260005b8181101561067357858101830151858201604001528201610657565b81811115610685576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156106ad57600080fd5b8135600281106106bc57600080fd5b9392505050565b600181811c908216806106d757607f821691505b602082108114156106f857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209965d9b71392cb6cda0879fc169da3023f4e680c01828801ea342906d7ae012664736f6c63430008090033";

type ProposalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProposalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Proposal__factory extends ContractFactory {
  constructor(...args: ProposalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Proposal";
  }

  deploy(
    metadataURL: string,
    deadline: BigNumberish,
    _id: BigNumberish,
    creator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Proposal> {
    return super.deploy(
      metadataURL,
      deadline,
      _id,
      creator,
      overrides || {}
    ) as Promise<Proposal>;
  }
  getDeployTransaction(
    metadataURL: string,
    deadline: BigNumberish,
    _id: BigNumberish,
    creator: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      metadataURL,
      deadline,
      _id,
      creator,
      overrides || {}
    );
  }
  attach(address: string): Proposal {
    return super.attach(address) as Proposal;
  }
  connect(signer: Signer): Proposal__factory {
    return super.connect(signer) as Proposal__factory;
  }
  static readonly contractName: "Proposal";
  public readonly contractName: "Proposal";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProposalInterface {
    return new utils.Interface(_abi) as ProposalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Proposal {
    return new Contract(address, _abi, signerOrProvider) as Proposal;
  }
}
