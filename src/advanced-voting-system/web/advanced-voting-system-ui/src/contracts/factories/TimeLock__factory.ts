/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TimeLock, TimeLockInterface } from "../TimeLock";

const _abi = [
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102c6806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80633ccfd60b14610030575b600080fd5b61003861003a565b005b6001544210156100b75760405162461bcd60e51b815260206004820152602960248201527f54696d654c6f636b3a204c6f636b2065787069726174696f6e206e6f7420796560448201527f742072656163686564000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff1633146101445760405162461bcd60e51b815260206004820152603460248201527f54696d654c6f636b3a2073656e6465722061646472657373206973206e6f742060448201527f7468652070726f706f73616c2063726561746f7200000000000000000000000060648201526084016100ae565b6002546101b95760405162461bcd60e51b815260206004820152602560248201527f54696d654c6f636b3a205468657265206973206e6f2045544820746f2077697460448201527f686472617700000000000000000000000000000000000000000000000000000060648201526084016100ae565b604080516060810182526000805473ffffffffffffffffffffffffffffffffffffffff168252600154602083015260028054838501819052908290559251919290913391908381818185875af1925050503d8060008114610236576040519150601f19603f3d011682016040523d82523d6000602084013e61023b565b606091505b505090508061028c5760405162461bcd60e51b815260206004820152601460248201527f4661696c656420746f2073656e6420457468657200000000000000000000000060448201526064016100ae565b505056fea2646970667358221220710d523a75d8d05c0099160a32ae75c5b3bbf1be2115583837d4ed5412117e3d64736f6c63430008090033";

type TimeLockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TimeLockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TimeLock__factory extends ContractFactory {
  constructor(...args: TimeLockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "TimeLock";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TimeLock> {
    return super.deploy(overrides || {}) as Promise<TimeLock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TimeLock {
    return super.attach(address) as TimeLock;
  }
  connect(signer: Signer): TimeLock__factory {
    return super.connect(signer) as TimeLock__factory;
  }
  static readonly contractName: "TimeLock";
  public readonly contractName: "TimeLock";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TimeLockInterface {
    return new utils.Interface(_abi) as TimeLockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TimeLock {
    return new Contract(address, _abi, signerOrProvider) as TimeLock;
  }
}
